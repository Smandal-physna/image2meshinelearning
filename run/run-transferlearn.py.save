from keras import applications
from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers
from keras.models import Sequential, load_model
from keras.layers import Dropout, Flatten, Dense, Conv2D
from keras.layers.core import Flatten, Dense, Dropout
from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D
from keras.utils import multi_gpu_model
from sklearn.utils import class_weight

import cv2, numpy as np
import tensorflow as tf
top_model_weights_path = '128_128_2_2_4classes.h5'


def only_load():
 def only_load():
    model = applications.VGG16(weights='imagenet', include_top=False,input_shape = (224,224,3))
    print('Model saved.')
    # build a classifier model to put on top of the convolutional model
    top_model = Sequential()
    print(model.output_shape[1:],model.output_shape)
    top_model.add(Flatten(input_shape=model.output_shape[1:]))
    top_model.add(Dense(128, activation='relu'))
    top_model.add(Dropout(0.2)
def only_load():
    model = applications.VGG16(weights='imagenet', include_top=False,input_shape = (224,224,3))
    print('Model saved.')
    # build a classifier model to put on top of the convolutional model
    top_model = Sequential()
    print(model.output_shape[1:],model.output_shape)
    top_model.add(Flatten(input_shape=model.output_shape[1:]))
    top_model.add(Dense(256, activation='relu'))
    top_model.add(Dropout(0.5))
    top_model.add(Dense(num_classes, activation='softmax'))

    # note that it is necessary to start with a fully-trained
    # classifier, including the top classifier,
    # in order to successfully do fine-tuning
    top_model.load_weights(top_model_weights_path)

    # add the model on top of the convolutional base
    mb = Sequential()
    mb.add(model)
    mb.add(top_model)    top_model.add(Dense(num_classes, activation='softmax'))

    # note that it is necessary to start with a fully-trained
    # classifier, including the top classifier,
    # in order to successfully do fine-tuning
    top_model.load_weights(top_model_weights_path)

    # add the model on top of the convolutional base
    mb = Sequential()
    mb.add(model)
    mb.add(top_model)
    model.add(Dense(256, activation='relu'))
    top_model.add(Dropout(0.5))
    top_model.add(Dense(num_classes, activation='softmax'))

    # note that it is necessary to start with a fully-trained
    # classifier, including the top classifier,
    # in order to successfully do fine-tuning
    top_model.load_weights(top_model_weights_path)

    # add the model on top of the convolutional base
    mb = Sequential()
    mb.add(model)
    mb.add(top_model)
    # model.add(top_model)
#     model = mb
    mb.load_weights('fin_ep50_bt64_bed_book_ch_desk_sof_tb.h5')
    return mb
